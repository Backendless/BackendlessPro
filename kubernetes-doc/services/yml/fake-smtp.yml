apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    field.cattle.io/creatorId: u-tqlk9
  name: fakesmtp
  selfLink: /apis/apps/v1/namespaces/smtp/statefulsets/fakesmtp
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: statefulSet-smtp-fakesmtp
  serviceName: fakesmtp
  template:
    metadata:
      annotations:
        cattle.io/timestamp: "2020-05-16T17:30:16Z"
        field.cattle.io/ports: '[[{"containerPort":5080,"dnsName":"fakesmtp-nodeport","hostPort":0,"kind":"NodePort","name":"5080tcp300011","protocol":"TCP","sourcePort":30001},{"containerPort":5025,"dnsName":"fakesmtp-nodeport","hostPort":0,"kind":"NodePort","name":"25tcp300021","protocol":"TCP","sourcePort":30002}]]'
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: statefulSet-smtp-fakesmtp
    spec:
      containers:
      - env:
        - name: APP_PASSWORD
          value: foo_admin
        - name: APP_USER
          value: foo
        - name: FAKESMTP_PORT
          value: "5025"
        - name: SERVER-PORT
          value: "5080"
        - name: SMTP_PASSWORD
          value: YkBja2VuZDF0
        - name: SMTP_USER
          value: backendlesstest@themidnightcoders.com
        image: kurzdigital/fake-smtp:latest
        imagePullPolicy: IfNotPresent
        name: fakesmtp
        ports:
        - containerPort: 5080
          name: 5080tcp300011
          protocol: TCP
        - containerPort: 5025
          name: 25tcp300021
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: RollingUpdate
